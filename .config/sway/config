# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#
# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8
exec swaybg -i .background.jpg
exec picom -f --corner-radius=12
exec conky -c .conky/card
exec conky -c .conky/machine
exec "cd Desktop/Repository/kards/exposure; if [ `date -r . +'%F'` != `date +'%F'` ]; then rm *; fi; cd ~"
exec fcitx5
exec clash -d .config/clash/
exec adb connect 192.168.1.9:4321
exec wechat-universal
exec linuxqq
exec qqmusic
exec obsidian
#exec_always /usr/local/Wolfram/Mathematica/14.0/SystemFiles/Links/WSTPServer/wstpserver &

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
font pango:DejaVu Sans Mono 8
gaps inner 15
gaps outer 5

# Start XDG autostart .desktop files using dex. See also
# https://wiki.archlinux.org/index.php/XDG_Autostart
# exec --no-startup-id dex --autostart --environment i3

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork

# Use pactl to adjust volume in PulseAudio.
# set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec ~/.hotkey.sh 'XF86AudioRaiseVolume' 'exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status'
bindsym XF86AudioLowerVolume exec ~/.hotkey.sh 'XF86AudioLowerVolume' 'exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status'
bindsym XF86AudioMute exec ~/.hotkey.sh 'XF86AudioMute' 'exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status'
# bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod
default_border none

# start a terminal
bindsym $mod+bracketleft exec ~/.hotkey.sh 'Super bracketleft' 'exec kitty'

# start dmenu (a program launcher)
# bindsym $mod+bracketright exec  --no-startup-id dmenu_run
# A more modern dmenu replacement is rofi:
bindsym $mod+bracketright exec ~/.hotkey.sh 'Super bracketright' 'exec "wofi"'

# kill focused window
bindsym $mod+Delete exec ~/.hotkey.sh 'Super Delete' 'kill'

# alternatively, you can use the cursor keys:
bindsym $mod+Left exec ~/.hotkey.sh 'Super Left' 'focus left'
bindsym $mod+Down exec ~/.hotkey.sh 'Super Down' 'focus down'
bindsym $mod+Up exec ~/.hotkey.sh 'Super Up' 'focus up'
bindsym $mod+Right exec ~/.hotkey.sh 'Super Right' 'focus right'

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left exec ~/.hotkey.sh 'Super Shift Left' 'move left'
bindsym $mod+Shift+Down exec ~/.hotkey.sh 'Super Shift Down' 'move down'
bindsym $mod+Shift+Up exec ~/.hotkey.sh 'Super Shift Up' 'move up'
bindsym $mod+Shift+Right exec ~/.hotkey.sh 'Super Shift Right' 'move right'

# split in horizontal orientation
bindsym $mod+h exec ~/.hotkey.sh 'Super h' 'split h'
# split in vertical orientation
bindsym $mod+v exec ~/.hotkey.sh 'Super v' 'split v'

# enter fullscreen mode for the focused container
bindsym $mod+Return exec ~/.hotkey.sh 'Super Return' 'fullscreen toggle'

# put window in & out scratchpad
bindsym $mod+Shift+equal exec ~/.hotkey.sh 'Super Shift equal' 'move scratchpad'
bindsym $mod+minus exec ~/.hotkey.sh 'Super minus' 'scratchpad show'

# toggle tiling / floating
bindsym $mod+Shift+space exec ~/.hotkey.sh 'Super Shift space' 'floating toggle'
# change focus between tiling / floating windows
bindsym $mod+space exec ~/.hotkey.sh 'Super space' 'focus mode_toggle'

# focus the parent and child container
bindsym $mod+Ctrl+Up exec ~/.hotkey.sh 'Super Ctrl Up' 'focus parent'
bindsym $mod+Ctrl+Down exec ~/.hotkey.sh 'Super Ctrl Down' 'focus child'

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws0 "0‚òØÔ∏èConfigure"
set $ws1 "1üß®Explore"
set $ws2 "2üéÜExpress"
set $ws3 "3üñ•Connect"
set $ws4 "4‚òéÔ∏èCommunicate"
set $ws5 "5üìπPerceive"
set $ws6 "6üéÆPlay"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9 State"

# switch to workspace
bindsym $mod+0 exec ~/.hotkey.sh 'Super 0' 'workspace number $ws0'
bindsym $mod+1 exec ~/.hotkey.sh 'Super 1' 'workspace number $ws1'
bindsym $mod+2 exec ~/.hotkey.sh 'Super 2' 'workspace number $ws2'
bindsym $mod+3 exec ~/.hotkey.sh 'Super 3' 'workspace number $ws3'
bindsym $mod+4 exec ~/.hotkey.sh 'Super 4' 'workspace number $ws4'
bindsym $mod+5 exec ~/.hotkey.sh 'Super 5' 'workspace number $ws5'
bindsym $mod+6 exec ~/.hotkey.sh 'Super 6' 'workspace number $ws6'
bindsym $mod+7 exec ~/.hotkey.sh 'Super 7' 'workspace number $ws7'
bindsym $mod+8 exec ~/.hotkey.sh 'Super 8' 'workspace number $ws8'
bindsym $mod+9 exec ~/.hotkey.sh 'Super 9' 'workspace number $ws9'

# move focused container to workspace
bindsym $mod+Shift+0 exec ~/.hotkey.sh 'Super Shift 0' 'move container to workspace number $ws0'
bindsym $mod+Shift+1 exec ~/.hotkey.sh 'Super Shift 1' 'move container to workspace number $ws1'
bindsym $mod+Shift+2 exec ~/.hotkey.sh 'Super Shift 2' 'move container to workspace number $ws2'
bindsym $mod+Shift+3 exec ~/.hotkey.sh 'Super Shift 3' 'move container to workspace number $ws3'
bindsym $mod+Shift+4 exec ~/.hotkey.sh 'Super Shift 4' 'move container to workspace number $ws4'
bindsym $mod+Shift+5 exec ~/.hotkey.sh 'Super Shift 5' 'move container to workspace number $ws5'
bindsym $mod+Shift+6 exec ~/.hotkey.sh 'Super Shift 6' 'move container to workspace number $ws6'
bindsym $mod+Shift+7 exec ~/.hotkey.sh 'Super Shift 7' 'move container to workspace number $ws7'
bindsym $mod+Shift+8 exec ~/.hotkey.sh 'Super Shift 8' 'move container to workspace number $ws8'
bindsym $mod+Shift+9 exec ~/.hotkey.sh 'Super Shift 9' 'move container to workspace number $ws9'

# ÂàÜÈÖçÂ∫îÁî®Âà∞Â∑•‰ΩúÂå∫
for_window [app_id="com.wolfram.Mathematica.14.0"] move to workspace $ws1
for_window [class="obsidian"] move to workspace $ws2
for_window [class="scrcpy"] move to workspace $ws3
for_window [app_id="Waydroid"] move to workspace $ws3
for_window [app_id="org.remmina.Remmina"] move to workspace $ws3
for_window [class="Gnome-boxes"] move to workspace $ws3
for_window [class="sunloginclient"] move to workspace $ws3
for_window [class="QQ"] move to workspace $ws4
for_window [class="wechat"] move to workspace $ws4
for_window [class="Feishu"] move to workspace $ws4
for_window [class="wemeetapp"] move to workspace $ws4
for_window [class="qqmusic"] move to workspace $ws5
for_window [class="steam"] move to workspace $ws6
for_window [class="conky"] move to workspace $ws9

# reload the configuration file
bindsym $mod+Tab exec ~/.hotkey.sh 'Super Tab' 'reload'
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+Tab exec ~/.hotkey.sh 'Super Shift Tab' 'restart'
# adapt config files
bindsym $mod+Ctrl+Tab exec ~/.hotkey.sh 'Super Ctrl Tab' 'exec kitty vim .config/sway/config'
bindsym $mod+Alt+Tab exec ~/.hotkey.sh 'Super Alt Tab' 'exec kitty vim .config/i3/bindsyms'

bindsym $mod+slash exec ~/.hotkey.sh 'Super slash' 'mode layout'
# resize window (you can also use the mouse for that)
mode layout {
    # These bindings trigger as soon as you enter the resize mode
    # same bindings, but for the arrow keys
    bindsym Left exec ~/.hotkey.sh 'Left' 'resize shrink width 10 px or 10 ppt'
    bindsym Down exec ~/.hotkey.sh 'Down' 'resize grow height 10 px or 10 ppt'
    bindsym Up exec ~/.hotkey.sh 'Up' 'resize shrink height 10 px or 10 ppt'
    bindsym Right exec ~/.hotkey.sh 'Right' 'resize grow width 10 px or 10 ppt'
    # change container layout (stacked, tabbed, toggle split)
    bindsym s exec ~/.hotkey.sh 's' 'layout stacking'
    bindsym w exec ~/.hotkey.sh 'w' 'layout tabbed'
    bindsym e exec ~/.hotkey.sh 'e' 'layout toggle split'
    # back to normal: Enter or Escape or $mod+slash
    bindsym Return exec ~/.hotkey.sh 'Return' 'mode default'
    bindsym Escape exec ~/.hotkey.sh 'Escape' 'mode default'
    bindsym $mod+slash exec ~/.hotkey.sh 'Super slash' 'mode default'
}

# Á™óÂè£ÁöÑËâ≤ÂΩ©ÊñπÊ°à
set $bgcolor    #523d6499
set $in-bgcolor #3636364D
set $text       #ffffff
set $u-bgcolor  #ff0000
set $indicator  #a8a3c1
set $in-text    #969696
#                       ËæπÊ°Ü            ËÉåÊôØ            ÊñáÊú¨            ÊåáÁ§∫Âô®ÔºàÊòæÁ§∫‰∏ã‰∏Ä‰∏™Á™óÂè£‰ΩçÁΩÆÁöÑÁ∫øÊù°Ôºâ
client.focused          $bgcolor        $bgcolor        $text           $indicator
client.unfocused        $in-bgcolor     $in-bgcolor     $in-text        $in-bgcolor
client.focused_inactive $in-bgcolor     $in-bgcolor     $in-text        $in-bgcolor
client.urgent           $u-bgcolor      $u-bgcolor      $text           $u-bgcolor

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
    status_command i3status -c .config/i3status/i3status.conf
    # i3bar_command i3bar --transparency
    font pango: Droid Sans Mono 11
    colors {
        background $bgcolor
        separator #191919
        #                       border          background      text
        focused_workspace       $bgcolor        $bgcolor        $text
        inactive_workspace      $in-bgcolor     $in-bgcolor     $text
        urgent_workspace        $u-bgcolor      $u-bgcolor      $text
    }
}

include ../i3/bindsyms
